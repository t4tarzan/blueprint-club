// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  lastActive   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  password             String?
  image                String?
  membershipTier       String    @default("free")
  emailVerified        DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  invalid_login_attempts Int      @default(0)
  lockedAt             DateTime?
  customerStripeId     String?

  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]
  invitations   Invitation[]
  auditLogs     AuditLog[]
  createdTeams  Team[]       @relation("TeamCreator")
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  domain      String?   @unique
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation("TeamCreator", fields: [createdById], references: [id])

  members     TeamMember[]
  invitations Invitation[]
  webhooks    Webhook[]
  auditLogs   AuditLog[]
  apiKeys     ApiKey[]
  samlConnection  SAMLConnection?
  scimConfig      SCIMConfig?
  subscriptions   Subscription[]
  usages          SubscriptionUsage[]
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  userId    String

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  teamId    String
  inviterId String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter   User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([email, teamId])
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityId    String?
  entityType  String
  entityName  String?
  actorId     String
  actorEmail  String
  actorName   String?
  teamId      String?
  createdAt   DateTime @default(now())
  metadata    Json?

  team        Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  actor       User     @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  teamId      String
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime?
  expiresAt   DateTime?

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Webhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  secret      String?
  events      String[]
  description String?
  isActive    Boolean  @default(true)
  teamId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  deliveries  WebhookDelivery[]
}

model WebhookDelivery {
  id            String   @id @default(cuid())
  webhookId     String
  eventType     String
  event         String
  url           String
  requestHeaders Json
  requestBody   Json
  responseHeaders Json?
  responseBody  Json?
  statusCode    Int?
  error         String?
  duration      Int
  success       Boolean
  createdAt     DateTime @default(now())

  webhook       Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  stripeId        String   @unique
  status          SubscriptionStatus
  priceId         String
  planId          String
  teamId          String?
  quantity        Int
  cancelAtPeriodEnd Boolean
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  usages          SubscriptionUsage[]
}

model SAMLConfig {
  id                String   @id @default(cuid())
  tenant            String
  product           String
  idpMetadata       String
  defaultRedirectUrl String
  redirectUrl       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([tenant, product])
}

model SCIMConfig {
  id          String   @id @default(cuid())
  clientId    String   @unique
  clientSecret String
  token       String   @unique
  enabled     Boolean  @default(false)
  teamId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model SAMLConnection {
  id                String   @id @default(cuid())
  teamId           String   @unique
  clientID         String
  clientSecret     String
  defaultRedirectUrl String
  redirectUrl      String
  acsUrl           String
  entityId         String
  idpUrl           String
  certificate      String
  metadataUrl      String?
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  team             Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model SubscriptionUsage {
  id            String   @id @default(cuid())
  subscriptionId String
  teamId        String
  metric        String
  feature       String
  value         Int      @default(0)
  limit         Int
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscription  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, metric, feature])
  @@index([teamId, metric])
}
